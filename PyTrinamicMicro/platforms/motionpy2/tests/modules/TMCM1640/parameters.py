'''
Test TMCL Parameters of TMCM1640 via RS485 interface and module ID 1.

Created on 15.12.2020

@author: LK
'''

from PyTrinamicMicro.platforms.motionpy2.connections.rs485_tmcl_interface import rs485_tmcl_interface
from PyTrinamic.modules.TMCM1640.TMCM_1640 import TMCM_1640
import logging

MODULE_ID = 1
GP_BANK = 0
AP_AXIS = 0

logger = logging.getLogger(__name__)
logger.info("Test module TMCM1640 parameters via RS485")

logger.info("Initializing interface.")
interface = rs485_tmcl_interface(module_id=MODULE_ID)

logger.info("Initializing module.")
module = TMCM_1640(interface)

logger.info("Testing global parameter access.")

logger.info("Getting global parameter ({}, {}) ...".format("serialBaudRate", module.GPs.serialBaudRate))
logger.info("{}".format(module.getGlobalParameter(module.GPs.serialBaudRate, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("serialAddress", module.GPs.serialAddress))
logger.info("{}".format(module.getGlobalParameter(module.GPs.serialAddress, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANBitRate", module.GPs.CANBitRate))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANBitRate, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANsendID", module.GPs.CANsendID))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANsendID, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANreceiveID", module.GPs.CANreceiveID))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANreceiveID, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("telegramPauseTime", module.GPs.telegramPauseTime))
logger.info("{}".format(module.getGlobalParameter(module.GPs.telegramPauseTime, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("serialHostAddress", module.GPs.serialHostAddress))
logger.info("{}".format(module.getGlobalParameter(module.GPs.serialHostAddress, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("autoStartMode", module.GPs.autoStartMode))
logger.info("{}".format(module.getGlobalParameter(module.GPs.autoStartMode, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("applicationStatus", module.GPs.applicationStatus))
logger.info("{}".format(module.getGlobalParameter(module.GPs.applicationStatus, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("programCounter", module.GPs.programCounter))
logger.info("{}".format(module.getGlobalParameter(module.GPs.programCounter, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("tickTimer", module.GPs.tickTimer))
logger.info("{}".format(module.getGlobalParameter(module.GPs.tickTimer, GP_BANK)))

logger.info("Testing axis parameter access.")

logger.info("Getting axis parameter ({}, {}) ...".format("TargetPosition", module.APs.TargetPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualPosition", module.APs.ActualPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TargetVelocity", module.APs.TargetVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualVelocity", module.APs.ActualVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxVelocity", module.APs.MaxVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxTorque", module.APs.MaxTorque))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxTorque, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TargetReachedVelocity", module.APs.TargetReachedVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetReachedVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MotorHaltedVelocity", module.APs.MotorHaltedVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.MotorHaltedVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TargetReachedDistance", module.APs.TargetReachedDistance))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetReachedDistance, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("Acceleration", module.APs.Acceleration))
logger.info("{}".format(module.getAxisParameter(module.APs.Acceleration, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RampVelocity", module.APs.RampVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.RampVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ThermalWindingTimeConstant", module.APs.ThermalWindingTimeConstant))
logger.info("{}".format(module.getAxisParameter(module.APs.ThermalWindingTimeConstant, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("IItlimit", module.APs.IItlimit))
logger.info("{}".format(module.getAxisParameter(module.APs.IItlimit, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("IItSum", module.APs.IItSum))
logger.info("{}".format(module.getAxisParameter(module.APs.IItSum, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("IItExceededCounter", module.APs.IItExceededCounter))
logger.info("{}".format(module.getAxisParameter(module.APs.IItExceededCounter, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ClearIItExceededFlag", module.APs.ClearIItExceededFlag))
logger.info("{}".format(module.getAxisParameter(module.APs.ClearIItExceededFlag, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ReinitBldcRegulation", module.APs.ReinitBldcRegulation))
logger.info("{}".format(module.getAxisParameter(module.APs.ReinitBldcRegulation, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PIDRegulationLoopDelay", module.APs.PIDRegulationLoopDelay))
logger.info("{}".format(module.getAxisParameter(module.APs.PIDRegulationLoopDelay, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("CurrentRegulationLoopDelay", module.APs.CurrentRegulationLoopDelay))
logger.info("{}".format(module.getAxisParameter(module.APs.CurrentRegulationLoopDelay, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EnableRamp", module.APs.EnableRamp))
logger.info("{}".format(module.getAxisParameter(module.APs.EnableRamp, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualTorque", module.APs.ActualTorque))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualTorque, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SupplyVoltage", module.APs.SupplyVoltage))
logger.info("{}".format(module.getAxisParameter(module.APs.SupplyVoltage, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DriverTemperature", module.APs.DriverTemperature))
logger.info("{}".format(module.getAxisParameter(module.APs.DriverTemperature, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TargetTorque", module.APs.TargetTorque))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetTorque, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("StatusFlags", module.APs.StatusFlags))
logger.info("{}".format(module.getAxisParameter(module.APs.StatusFlags, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("CommutationMode", module.APs.CommutationMode))
logger.info("{}".format(module.getAxisParameter(module.APs.CommutationMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ClearOnNull", module.APs.ClearOnNull))
logger.info("{}".format(module.getAxisParameter(module.APs.ClearOnNull, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ClearOnce", module.APs.ClearOnce))
logger.info("{}".format(module.getAxisParameter(module.APs.ClearOnce, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderOffset", module.APs.EncoderOffset))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderOffset, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TorqueP", module.APs.TorqueP))
logger.info("{}".format(module.getAxisParameter(module.APs.TorqueP, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TorqueI", module.APs.TorqueI))
logger.info("{}".format(module.getAxisParameter(module.APs.TorqueI, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("StartCurrent", module.APs.StartCurrent))
logger.info("{}".format(module.getAxisParameter(module.APs.StartCurrent, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue0", module.APs.DebugValue0))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue0, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue1", module.APs.DebugValue1))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue1, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue2", module.APs.DebugValue2))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue2, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue3", module.APs.DebugValue3))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue3, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue4", module.APs.DebugValue4))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue4, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue5", module.APs.DebugValue5))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue5, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue6", module.APs.DebugValue6))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue6, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue7", module.APs.DebugValue7))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue7, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue8", module.APs.DebugValue8))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue8, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DebugValue9", module.APs.DebugValue9))
logger.info("{}".format(module.getAxisParameter(module.APs.DebugValue9, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("CurrentPIDError", module.APs.CurrentPIDError))
logger.info("{}".format(module.getAxisParameter(module.APs.CurrentPIDError, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("CurrentPIDErrorSum", module.APs.CurrentPIDErrorSum))
logger.info("{}".format(module.getAxisParameter(module.APs.CurrentPIDErrorSum, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualHallAngle", module.APs.ActualHallAngle))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualHallAngle, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualEncoderAngle", module.APs.ActualEncoderAngle))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualEncoderAngle, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualControlledAngle", module.APs.ActualControlledAngle))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualControlledAngle, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PositionPIDError", module.APs.PositionPIDError))
logger.info("{}".format(module.getAxisParameter(module.APs.PositionPIDError, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VelocityPIDError", module.APs.VelocityPIDError))
logger.info("{}".format(module.getAxisParameter(module.APs.VelocityPIDError, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VelocityPIDErrorSum", module.APs.VelocityPIDErrorSum))
logger.info("{}".format(module.getAxisParameter(module.APs.VelocityPIDErrorSum, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PositionP", module.APs.PositionP))
logger.info("{}".format(module.getAxisParameter(module.APs.PositionP, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VelocityP", module.APs.VelocityP))
logger.info("{}".format(module.getAxisParameter(module.APs.VelocityP, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VelocityI", module.APs.VelocityI))
logger.info("{}".format(module.getAxisParameter(module.APs.VelocityI, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("InitVelocity", module.APs.InitVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.InitVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("InitSineDelay", module.APs.InitSineDelay))
logger.info("{}".format(module.getAxisParameter(module.APs.InitSineDelay, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderInitMode", module.APs.EncoderInitMode))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderInitMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderSteps", module.APs.EncoderSteps))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderSteps, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderDirection", module.APs.EncoderDirection))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderDirection, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("HallInterpolation", module.APs.HallInterpolation))
logger.info("{}".format(module.getAxisParameter(module.APs.HallInterpolation, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MotorPoles", module.APs.MotorPoles))
logger.info("{}".format(module.getAxisParameter(module.APs.MotorPoles, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("HallSensorInvert", module.APs.HallSensorInvert))
logger.info("{}".format(module.getAxisParameter(module.APs.HallSensorInvert, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EnableDriver", module.APs.EnableDriver))
logger.info("{}".format(module.getAxisParameter(module.APs.EnableDriver, AP_AXIS)))

logger.info("Test completed successfully.")
