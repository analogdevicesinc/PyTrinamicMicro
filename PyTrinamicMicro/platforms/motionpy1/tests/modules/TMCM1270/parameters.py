################################################################################
# Copyright © 2019 TRINAMIC Motion Control GmbH & Co. KG
# (now owned by Analog Devices Inc.),
#
# Copyright © 2023 Analog Devices Inc. All Rights Reserved. This software is
# proprietary & confidential to Analog Devices, Inc. and its licensors.
################################################################################

'''
Test TMCL Parameters of TMCM1270 via CAN interface and module ID 1.

Created on 15.12.2020

@author: LK
'''

from PyTrinamicMicro.platforms.motionpy1.connections.can_tmcl_interface import can_tmcl_interface
from PyTrinamic.modules.TMCM1270.TMCM_1270 import TMCM_1270
import logging

MODULE_ID = 1
GP_BANK = 0
AP_AXIS = 0

logger = logging.getLogger(__name__)
logger.info("Test module TMCM1270 parameters via CAN")

logger.info("Initializing interface.")
interface = can_tmcl_interface(module_id=MODULE_ID)

logger.info("Initializing module.")
module = TMCM_1161(interface)

logger.info("Testing global parameter access.")

logger.info("Getting global parameter ({}, {}) ...".format("CANBitrate", module.GPs.CANBitrate))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANBitrate, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANSendId", module.GPs.CANSendId))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANSendId, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANReceiveId", module.GPs.CANReceiveId))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANReceiveId, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("CANSecondaryId", module.GPs.CANSecondaryId))
logger.info("{}".format(module.getGlobalParameter(module.GPs.CANSecondaryId, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("autoStartMode", module.GPs.autoStartMode))
logger.info("{}".format(module.getGlobalParameter(module.GPs.autoStartMode, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("protectionMode", module.GPs.protectionMode))
logger.info("{}".format(module.getGlobalParameter(module.GPs.protectionMode, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("eepromCoordinateStore", module.GPs.eepromCoordinateStore))
logger.info("{}".format(module.getGlobalParameter(module.GPs.eepromCoordinateStore, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("zeroUserVariables", module.GPs.zeroUserVariables))
logger.info("{}".format(module.getGlobalParameter(module.GPs.zeroUserVariables, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("applicationStatus", module.GPs.applicationStatus))
logger.info("{}".format(module.getGlobalParameter(module.GPs.applicationStatus, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("programCounter", module.GPs.programCounter))
logger.info("{}".format(module.getGlobalParameter(module.GPs.programCounter, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("lastTmclError", module.GPs.lastTmclError))
logger.info("{}".format(module.getGlobalParameter(module.GPs.lastTmclError, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("tickTimer", module.GPs.tickTimer))
logger.info("{}".format(module.getGlobalParameter(module.GPs.tickTimer, GP_BANK)))
logger.info("Getting global parameter ({}, {}) ...".format("randomNumber", module.GPs.randomNumber))
logger.info("{}".format(module.getGlobalParameter(module.GPs.randomNumber, GP_BANK)))

logger.info("Testing axis parameter access.")

logger.info("Getting axis parameter ({}, {}) ...".format("TargetPosition", module.APs.TargetPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualPosition", module.APs.ActualPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TargetVelocity", module.APs.TargetVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.TargetVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ActualVelocity", module.APs.ActualVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.ActualVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxVelocity", module.APs.MaxVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxAcceleration", module.APs.MaxAcceleration))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxAcceleration, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxCurrent", module.APs.MaxCurrent))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxCurrent, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("StandbyCurrent", module.APs.StandbyCurrent))
logger.info("{}".format(module.getAxisParameter(module.APs.StandbyCurrent, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PositionReachedFlag", module.APs.PositionReachedFlag))
logger.info("{}".format(module.getAxisParameter(module.APs.PositionReachedFlag, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("HomeSwitch", module.APs.HomeSwitch))
logger.info("{}".format(module.getAxisParameter(module.APs.HomeSwitch, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RightEndstop", module.APs.RightEndstop))
logger.info("{}".format(module.getAxisParameter(module.APs.RightEndstop, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("LeftEndstop", module.APs.LeftEndstop))
logger.info("{}".format(module.getAxisParameter(module.APs.LeftEndstop, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("AutomaticRightStop", module.APs.AutomaticRightStop))
logger.info("{}".format(module.getAxisParameter(module.APs.AutomaticRightStop, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("AutomaticLeftStop", module.APs.AutomaticLeftStop))
logger.info("{}".format(module.getAxisParameter(module.APs.AutomaticLeftStop, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("swapSwitchInputs", module.APs.swapSwitchInputs))
logger.info("{}".format(module.getAxisParameter(module.APs.swapSwitchInputs, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("A1", module.APs.A1))
logger.info("{}".format(module.getAxisParameter(module.APs.A1, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("V1", module.APs.V1))
logger.info("{}".format(module.getAxisParameter(module.APs.V1, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MaxDeceleration", module.APs.MaxDeceleration))
logger.info("{}".format(module.getAxisParameter(module.APs.MaxDeceleration, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("D1", module.APs.D1))
logger.info("{}".format(module.getAxisParameter(module.APs.D1, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("StartVelocity", module.APs.StartVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.StartVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("StopVelocity", module.APs.StopVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.StopVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RampWaitTime", module.APs.RampWaitTime))
logger.info("{}".format(module.getAxisParameter(module.APs.RampWaitTime, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("THIGH", module.APs.THIGH))
logger.info("{}".format(module.getAxisParameter(module.APs.THIGH, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VDCMIN", module.APs.VDCMIN))
logger.info("{}".format(module.getAxisParameter(module.APs.VDCMIN, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("rightSwitchPolarity", module.APs.rightSwitchPolarity))
logger.info("{}".format(module.getAxisParameter(module.APs.rightSwitchPolarity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("leftSwitchPolarity", module.APs.leftSwitchPolarity))
logger.info("{}".format(module.getAxisParameter(module.APs.leftSwitchPolarity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("softstop", module.APs.softstop))
logger.info("{}".format(module.getAxisParameter(module.APs.softstop, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("HighSpeedChopperMode", module.APs.HighSpeedChopperMode))
logger.info("{}".format(module.getAxisParameter(module.APs.HighSpeedChopperMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("HighSpeedFullstepMode", module.APs.HighSpeedFullstepMode))
logger.info("{}".format(module.getAxisParameter(module.APs.HighSpeedFullstepMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MeasuredSpeed", module.APs.MeasuredSpeed))
logger.info("{}".format(module.getAxisParameter(module.APs.MeasuredSpeed, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PowerDownRamp", module.APs.PowerDownRamp))
logger.info("{}".format(module.getAxisParameter(module.APs.PowerDownRamp, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RelativePositioningOptionCode", module.APs.RelativePositioningOptionCode))
logger.info("{}".format(module.getAxisParameter(module.APs.RelativePositioningOptionCode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MicrostepResolution", module.APs.MicrostepResolution))
logger.info("{}".format(module.getAxisParameter(module.APs.MicrostepResolution, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ChopperBlankTime", module.APs.ChopperBlankTime))
logger.info("{}".format(module.getAxisParameter(module.APs.ChopperBlankTime, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ConstantTOffMode", module.APs.ConstantTOffMode))
logger.info("{}".format(module.getAxisParameter(module.APs.ConstantTOffMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DisableFastDecayComparator", module.APs.DisableFastDecayComparator))
logger.info("{}".format(module.getAxisParameter(module.APs.DisableFastDecayComparator, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ChopperHysteresisEnd", module.APs.ChopperHysteresisEnd))
logger.info("{}".format(module.getAxisParameter(module.APs.ChopperHysteresisEnd, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ChopperHysteresisStart", module.APs.ChopperHysteresisStart))
logger.info("{}".format(module.getAxisParameter(module.APs.ChopperHysteresisStart, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("TOff", module.APs.TOff))
logger.info("{}".format(module.getAxisParameter(module.APs.TOff, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SEIMIN", module.APs.SEIMIN))
logger.info("{}".format(module.getAxisParameter(module.APs.SEIMIN, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SECDS", module.APs.SECDS))
logger.info("{}".format(module.getAxisParameter(module.APs.SECDS, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("smartEnergyHysteresis", module.APs.smartEnergyHysteresis))
logger.info("{}".format(module.getAxisParameter(module.APs.smartEnergyHysteresis, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SECUS", module.APs.SECUS))
logger.info("{}".format(module.getAxisParameter(module.APs.SECUS, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("smartEnergyHysteresisStart", module.APs.smartEnergyHysteresisStart))
logger.info("{}".format(module.getAxisParameter(module.APs.smartEnergyHysteresisStart, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SG2FilterEnable", module.APs.SG2FilterEnable))
logger.info("{}".format(module.getAxisParameter(module.APs.SG2FilterEnable, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("SG2Threshold", module.APs.SG2Threshold))
logger.info("{}".format(module.getAxisParameter(module.APs.SG2Threshold, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ShortToGroundProtection", module.APs.ShortToGroundProtection))
logger.info("{}".format(module.getAxisParameter(module.APs.ShortToGroundProtection, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("VSense", module.APs.VSense))
logger.info("{}".format(module.getAxisParameter(module.APs.VSense, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("smartEnergyActualCurrent", module.APs.smartEnergyActualCurrent))
logger.info("{}".format(module.getAxisParameter(module.APs.smartEnergyActualCurrent, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("smartEnergyStallVelocity", module.APs.smartEnergyStallVelocity))
logger.info("{}".format(module.getAxisParameter(module.APs.smartEnergyStallVelocity, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("smartEnergyThresholdSpeed", module.APs.smartEnergyThresholdSpeed))
logger.info("{}".format(module.getAxisParameter(module.APs.smartEnergyThresholdSpeed, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RandomTOffMode", module.APs.RandomTOffMode))
logger.info("{}".format(module.getAxisParameter(module.APs.RandomTOffMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ChopperSynchronization", module.APs.ChopperSynchronization))
logger.info("{}".format(module.getAxisParameter(module.APs.ChopperSynchronization, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMThresholdSpeed", module.APs.PWMThresholdSpeed))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMThresholdSpeed, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMGrad", module.APs.PWMGrad))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMGrad, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMAmplitude", module.APs.PWMAmplitude))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMAmplitude, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMScale", module.APs.PWMScale))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMScale, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("pwmMode", module.APs.pwmMode))
logger.info("{}".format(module.getAxisParameter(module.APs.pwmMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMFrequency", module.APs.PWMFrequency))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMFrequency, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PWMAutoscale", module.APs.PWMAutoscale))
logger.info("{}".format(module.getAxisParameter(module.APs.PWMAutoscale, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ReferenceSearchMode", module.APs.ReferenceSearchMode))
logger.info("{}".format(module.getAxisParameter(module.APs.ReferenceSearchMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("ReferenceSearchSpeed", module.APs.ReferenceSearchSpeed))
logger.info("{}".format(module.getAxisParameter(module.APs.ReferenceSearchSpeed, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RefSwitchSpeed", module.APs.RefSwitchSpeed))
logger.info("{}".format(module.getAxisParameter(module.APs.RefSwitchSpeed, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("RightLimitSwitchPosition", module.APs.RightLimitSwitchPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.RightLimitSwitchPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("LastReferencePosition", module.APs.LastReferencePosition))
logger.info("{}".format(module.getAxisParameter(module.APs.LastReferencePosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("encoderMode", module.APs.encoderMode))
logger.info("{}".format(module.getAxisParameter(module.APs.encoderMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("MotorFullStepResolution", module.APs.MotorFullStepResolution))
logger.info("{}".format(module.getAxisParameter(module.APs.MotorFullStepResolution, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("pwmSymmetric", module.APs.pwmSymmetric))
logger.info("{}".format(module.getAxisParameter(module.APs.pwmSymmetric, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("FreewheelingMode", module.APs.FreewheelingMode))
logger.info("{}".format(module.getAxisParameter(module.APs.FreewheelingMode, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("LoadValue", module.APs.LoadValue))
logger.info("{}".format(module.getAxisParameter(module.APs.LoadValue, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("extendedErrorFlags", module.APs.extendedErrorFlags))
logger.info("{}".format(module.getAxisParameter(module.APs.extendedErrorFlags, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("DrvStatusFlags", module.APs.DrvStatusFlags))
logger.info("{}".format(module.getAxisParameter(module.APs.DrvStatusFlags, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderPosition", module.APs.EncoderPosition))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderPosition, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("EncoderResolution", module.APs.EncoderResolution))
logger.info("{}".format(module.getAxisParameter(module.APs.EncoderResolution, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("max_EncoderDeviation", module.APs.max_EncoderDeviation))
logger.info("{}".format(module.getAxisParameter(module.APs.max_EncoderDeviation, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("PowerDownDelay", module.APs.PowerDownDelay))
logger.info("{}".format(module.getAxisParameter(module.APs.PowerDownDelay, AP_AXIS)))
logger.info("Getting axis parameter ({}, {}) ...".format("UnitMode", module.APs.UnitMode))
logger.info("{}".format(module.getAxisParameter(module.APs.UnitMode, AP_AXIS)))

logger.info("Test completed successfully.")
